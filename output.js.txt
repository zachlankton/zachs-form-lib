
//==========================================================================
// File: src/App.tsx
//==========================================================================

import { Input } from "./components/ValidatorInput";
import { Form } from "./components/Form";
import { useRef, useState } from "react";
import { Display } from "./components/Display";
import { Btn } from "./components/Button";
import { setFormData } from "./formLibrary/formHelper";
import { TelephoneInput } from "./components/TelephoneInput";
import { CreditCardInput } from "./components/CreditCardInput";

const testValue = {
  name: "Name Test Value",
  email: "name.test@value.com",
  age: 50,
  "phone-with-mask": "asdf999asdf888asdf7777asdf",
  "phone-un-masked": "1231231231",
};

function App() {
  const formRef = useRef(null);
  const [data, setData] = useState<any>({});
  return (
    <>
      <Form onSubmit={(data) => setData(data)} fRef={formRef}>
        <Input name="name" label="Name" required minLength={5} />
        <Input name="email" label="Email" required type="email" />
        <Input
          name="age"
          label="Age"
          required
          type="number"
          customValidator={(val) =>
            +val >= 20 && +val <= 50 ? true : "Must be between 20 and 50"
          }
        />

        <TelephoneInput
          name="phone-with-mask"
          label="Phone (value includeds mask)"
          required
        />
        <TelephoneInput
          name="phone-un-masked"
          label="Phone (value unmasked)"
          unmaskInputValueProp={true}
          required
        />

        <CreditCardInput name="credit-card" label="Credit Card" required />

        <Btn type="submit">Submit</Btn>
        <Btn type="reset">Reset</Btn>
        <Btn
          type="button"
          onClick={() => setFormData(formRef.current, testValue)}
        >
          Set Test Data
        </Btn>
      </Form>

      <Display data={data} />
    </>
  );
}

export default App;


//==========================================================================
// File: src/main.tsx
//==========================================================================

import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.tsx";

ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


//==========================================================================
// File: src/vite-env.d.ts
//==========================================================================

/// <reference types="vite/client" />


//==========================================================================
// File: src/components//Button.tsx
//==========================================================================

export function Btn(props: any) {
  return (
    <button {...props} style={{ margin: 10 }}>
      {props.children}
    </button>
  );
}


//==========================================================================
// File: src/components//CreditCardInput.tsx
//==========================================================================

import { Input } from "./ValidatorInput";

function luhnCheck(numWithSpaces: string) {
  const ccNum = numWithSpaces.replaceAll(" ", "");
  const arr = [0, 2, 4, 6, 8, 1, 3, 5, 7, 9];
  let bit = 1;
  let len = ccNum.length;
  let sum = 0;
  let val;

  while (len) {
    val = parseInt(ccNum.charAt(--len), 10);
    // eslint-disable-next-line no-cond-assign
    sum += (bit ^= 1) ? arr[val] : val;
  }

  return sum && sum % 10 === 0;
}

export function CreditCardInput(props: any) {
  return (
    <Input
      mask=".... .... .... ...."
      maskSlots="."
      dataAccept={/\d/}
      exactLength={16}
      validateUnMaskedValue={true}
      customValidator={luhnCheck}
      customErrorMessages={{
        customNotValid: "Invalid credit card number... Try 4111 1111 1111 1111",
      }}
      {...props}
    />
  );
}


//==========================================================================
// File: src/components//Display.tsx
//==========================================================================

export function Display(props: any) {
  return (
    <div
      style={{
        ...props.style,
        maxWidth: "400px",
        margin: "20px auto",
        border: "1px solid #ccc",
        padding: "20px",
        borderRadius: "5px",
        boxShadow: "0 0 10px #ccc",
      }}
    >
      <pre>
        <code>{JSON.stringify(props.data, null, "  ")}</code>
      </pre>
    </div>
  );
}


//==========================================================================
// File: src/components//Form.tsx
//==========================================================================

"use client";
import { FormEventHandler, ReactNode } from "react";
import { getFormData } from "../formLibrary/formHelper";

interface FormProps {
  onSubmit?: (data: any) => void;
  className?: string;
  style?: React.CSSProperties;
  children?: ReactNode;
  method?: string;
  action?: string;
  fRef?: any;
}

export function Form(props: FormProps) {
  const submitFunc: FormEventHandler = (ev) => {
    if (props.onSubmit === undefined) return;
    ev.preventDefault();
    const frm = ev.target as HTMLFormElement;
    if (!frm) return;
    if (frm.checkValidity() === false) return;
    const data = getFormData(ev.target);
    props.onSubmit(data);
    frm.reset();
  };
  return (
    <form
      onSubmit={submitFunc}
      className={props.className}
      style={{
        ...props.style,
        maxWidth: "400px",
        margin: "20px auto",
        border: "1px solid #ccc",
        padding: "20px",
        borderRadius: "5px",
        boxShadow: "0 0 10px #ccc",
      }}
      method={props.method}
      action={props.action}
      ref={props.fRef}
    >
      {props.children}
    </form>
  );
}


//==========================================================================
// File: src/components//TelephoneInput.tsx
//==========================================================================

import { Input } from "./ValidatorInput";

export function TelephoneInput(props: any) {
  return (
    <Input
      mask="(___) ___-____"
      maskSlots="_"
      dataAccept={/\d/}
      showFullMaskWhileTyping={true}
      exactLength={10}
      validateUnMaskedValue={true}
      type="tel"
      {...props}
    />
  );
}


//==========================================================================
// File: src/components//ValidatorInput.tsx
//==========================================================================

"use client";
import { setupValidatorInput } from "../formLibrary/validator";
import type { ValidatorOptions } from "../formLibrary/validator";
import { useEffect, useRef } from "react";

export interface ValidatorInputProps
  extends Omit<ValidatorOptions, "inputElm"> {
  name: string;
  label?: string;
  labelClass?: string;
  labelStyle?: React.CSSProperties;
  errorClass?: string;
  errorStyle?: React.CSSProperties;
  placeholder?: string;
  type?: string;
  value?: any;
  readonly?: boolean;
  className?: string;
  style?: React.CSSProperties;
  labelProps?: any;
  inputProps?: any;
  errorProps?: any;
}

export function Input(props: ValidatorInputProps) {
  const inputRef: any = useRef(null);
  const errorRef: any = useRef(null);
  const setupValidator = () => {
    if (!inputRef.current || !errorRef.current) return;
    if (inputRef.current.validatorOptions || errorRef.current.validatorOptions)
      return;
    inputRef.current.readOnly = props.readonly || false;
    setupValidatorInput({
      inputElm: inputRef.current,
      errorElm: errorRef.current,
      ...props,
    });
  };

  // eslint-disable-next-line react-hooks/exhaustive-deps
  useEffect(setupValidator, []);

  return (
    <>
      {props.label && (
        <label
          htmlFor={props.name}
          className={props.labelClass}
          style={{ ...props.labelStyle, display: "block", marginTop: 10 }}
          {...props.labelProps}
        >
          {props.label}
        </label>
      )}
      <input
        defaultValue={props.value || ""}
        ref={inputRef}
        name={props.name}
        id={props.name}
        className={props.className}
        style={{
          ...props.style,
          display: "block",
          width: "100%",
          padding: 10,
          boxSizing: "border-box",
          borderRadius: 5,
          border: "1px solid #ccc",
        }}
        placeholder={props.placeholder || ""}
        type={props.type || "text"}
        {...props.inputProps}
      />
      <div
        ref={errorRef}
        style={{
          height: 0,
          overflow: "hidden",
          color: "red",
          transition: "all",
          transitionDuration: "300ms",
          ...props.errorStyle,
        }}
        className={props.errorClass}
        {...props.errorProps}
      />
    </>
  );
}


//==========================================================================
// File: src/formLibrary//formHelper.ts
//==========================================================================

import { getObjVal, setObjVal } from "./objectFromPathString";

function getFormData(form: any): any {
  const namedElements = Array.from(
    form.querySelectorAll("[name]")
  ) as HTMLInputElement[];
  const return_data = {};
  for (const elm of namedElements) {
    const path = elm.getAttribute("name") || "";
    const { val, skip } = getValue(elm);
    if (skip) continue;
    setObjVal(return_data, path, val);
  }
  return return_data;
}

function getValue(elm: HTMLInputElement) {
  if (elm.type === "radio" && elm.checked) return { val: elm.id || elm.value };
  if (elm.type === "radio" && !elm.checked) return { skip: true };
  if (elm.type === "checkbox") return { val: elm.checked };
  if (elm.type === "number") return { val: +elm.value };
  if (elm.value) return { val: elm.value };
  return { val: "" };
}

function setValue(elm: HTMLInputElement, val: any) {
  const radioVal = elm.id || elm.value;
  if (elm.type === "radio" && val === radioVal) return (elm.checked = true);
  if (elm.type === "radio" && val !== radioVal) return (elm.checked = false);
  if (elm.type === "checkbox") return (elm.checked = !!val);
  elm.value = val;
}

interface setFormDataOptions {
  skipChangeEvent?: boolean;
  skipUnsetProperties?: boolean;
}

function setFormData(form: any, data: any, opts: setFormDataOptions = {}) {
  const namedElements = Array.from(
    form.querySelectorAll("[name]")
  ) as HTMLInputElement[];
  for (const elm of namedElements) {
    const path = elm.getAttribute("name") || "";
    const val = getObjVal(data, path);

    if (opts.skipUnsetProperties && (val === null || val === undefined))
      continue;

    setValue(elm, val || "");

    const evtInput = new Event("input", { bubbles: true });
    const evtChange = new Event("change", { bubbles: true });

    !opts.skipChangeEvent && elm.dispatchEvent(evtChange);
    !opts.skipChangeEvent && elm.dispatchEvent(evtInput);
  }
}

export { getFormData, setFormData };


//==========================================================================
// File: src/formLibrary//objectFromPathString.ts
//==========================================================================

function getObjVal(obj: any, path: string) {
  if (!obj) return obj;
  const { pathSplit, lastKey } = getPathSplit(path);
  let currentWorkingObject = obj;
  pathSplit.reduce((_thisKey, nextKey) => {
    const thisKey = _thisKey.replaceAll("\\", "");
    currentWorkingObject = currentWorkingObject[thisKey] || {};
    return nextKey;
  });
  return currentWorkingObject[lastKey];
}

function setObjVal(obj: any, path: string, val: any) {
  const { objAtPath, lastKey } = createObjectFromPath(obj, path);
  return val !== undefined ? (objAtPath[lastKey] = val) : objAtPath[lastKey];
}

function createObjectFromPath(obj: any, path: string) {
  let currentWorkingObject = obj;
  const { pathSplit, lastKey } = getPathSplit(path);
  pathSplit.reduce((_thisKey, nextKey) => {
    const thisKey = _thisKey.replaceAll("\\", "");
    make(thisKey)
      .onThe(currentWorkingObject)
      .anObjectOrArrayDependingOn(nextKey);
    currentWorkingObject = currentWorkingObject[thisKey];
    return nextKey;
  });
  return { objAtPath: currentWorkingObject, lastKey };
}

function getPathSplit(path: string) {
  // splits complex path strings like "deeply.nested[9][1][asdf].asdf.0.1.and.even.escaping\\[brackets\\]and\\.periods\\."
  // into ['deeply', 'nested', '9', '1', 'asdf', 'asdf', '0', '1', 'and', 'even', 'escaping\\[brackets\\]and\\.periods\\.']
  const pathSplit = path.split(/\]\[|\]\.|(?<!\\)\[|(?<!\\)\.|(?<!\\)\]/g);
  if (pathSplit.at(-1) === "") pathSplit.pop();
  return { pathSplit, lastKey: pathSplit.at(-1)?.replaceAll("\\", "") || "" };
}

function make(thisKey: string) {
  let currentWorkingObject: any = null;

  const anObjectOrArrayDependingOn = (nextKey: string) => {
    if (currentWorkingObject[thisKey]) return;
    Number.isInteger(Number(nextKey))
      ? (currentWorkingObject[thisKey] = [])
      : (currentWorkingObject[thisKey] = {});
  };

  const onThe = (cwo: any) => {
    currentWorkingObject = cwo;
    return { anObjectOrArrayDependingOn };
  };
  return { onThe };
}

export { getObjVal, setObjVal };


//==========================================================================
// File: src/formLibrary//validator.ts
//==========================================================================

interface CustomInput extends HTMLInputElement {
  errorElm: HTMLElement;
  errorObj: Map<string, boolean>;
}

interface CustomErrorElm extends HTMLElement {
  errorObj?: Map<string, boolean>;
}

interface ValidatorOptions {
  inputElm: CustomInput | string | ((opts: ValidatorOptions) => CustomInput);
  errorElm?: CustomErrorElm;
  required?: boolean;
  minLength?: number;
  maxLength?: number;
  exactLength?: number;
  pattern?: RegExp;
  customValidator?: (value: string) => boolean | string;
  mask?: string;
  maskSlots?: string;
  dataAccept?: RegExp;
  allowUnacceptedChars?: boolean;
  unmaskInputValueProp?: boolean;
  showFullMaskWhileTyping?: boolean;
  hideDotSlots?: boolean;
  validateUnMaskedValue?: boolean;
  validateOnInput?: boolean;
  isNumeric?: boolean;
  customErrorMessages?: {
    isRequired?: string;
    inputNotLongEnough?: string;
    inputLengthTooLong?: string;
    patternNotValid?: string;
    customNotValid?: string;
  };
}

interface ValidatorOptionsWithErrorElm extends ValidatorOptions {
  errorElm: CustomErrorElm;
}

// a deduplicated list of all the inputs and errorElements that are registered by setupInput
const inputElms = new Map();
const errorElms = new Map();

const keyDownEvent = "keydown";
const inputEvent = "input";
const blurEvent = "blur";
const clickEvent = "click";
const focusEvent = "focus";
const resetEvent = "reset";

function setupValidatorInput(opts: ValidatorOptions) {
  opts.inputElm = getInputElm(opts) as CustomInput;
  opts.errorElm = getErrorElm(opts);

  validateOptions(opts);

  const inputElm = opts.inputElm;
  if (inputElms.has(inputElm)) {
    return;
    return console.error(
      `${inputElm.name} - This input has already been setup. If you would like to make changes to the options you can access them directly on the [element].validatorOptions.`
    );
  }

  opts.errorElm = opts.errorElm || createErrorElementForInput(inputElm);
  opts = mergeDefaultOptions(opts);

  setupOptionPropertyGettersAndSetters(opts);

  const errorElm = opts.errorElm;
  const form = inputElm.form;

  // this for situations where the input is hidden because it is managed by an
  // external library like uncontrolled components in headless ui that
  // maintain the state/value in a regular hidden input.
  // We want to be able to validate its value and show errors if needed.
  // Since this library leans heavily on browser validation api's and
  // the browser doesn't run validation on hidden inputs
  // we change it to text, unhide it and display none so the user still doesn't
  // see it but the browser will run validation on it
  if (inputElm.type === "hidden") {
    inputElm.type = "text";
    inputElm.hidden = false;
    inputElm.dataset.supposedToBeHidden = "true";
    inputElm.readOnly = false;
    inputElm.style.display = "none";
  }

  inputElm.errorElm = errorElm as HTMLElement;

  inputElms.set(inputElm, opts);
  errorElms.set(errorElm, opts);
  errorElm!.errorObj = new Map();

  if (opts.mask) VMasker(inputElm);
  if (!opts.mask) setupValueProxy(inputElm);

  addEventListener(inputElm, blurEvent, onBlur);
  addEventListener(inputElm, inputEvent, onInput);
  addEventListener(inputElm, keyDownEvent, onKeyDown);

  if (!form) throw new Error("Input must be inside a form element to use this");
  addEventListener(form, resetEvent, () => resetInput(inputElm));

  !form.zwcSubmitValidation && addEventListener(form, "submit", onSubmit, true);
  form.zwcSubmitValidation = true;
  form.noValidate = true; //disable browser validation, we got it from here
}

function addEventListener(
  elm: HTMLFormElement | HTMLInputElement,
  event: string,
  func: any,
  opts = {}
) {
  elm.addEventListener(event, func, opts);
}

function ObjectDefineProperty(
  obj: any,
  propName: string,
  opts: PropertyDescriptor & ThisType<any>
) {
  return Object.defineProperty(obj, propName, opts);
}

function ObjectGetOwnPropertyDescriptor(proto: any, propName: string) {
  return Object.getOwnPropertyDescriptor(proto, propName);
}

function setupValueProxy(inputElm: HTMLInputElement) {
  const valueProp = ObjectGetOwnPropertyDescriptor(
    HTMLInputElement.prototype,
    "value"
  );

  const setVal = (newValue: any) => valueProp!.set!.call(inputElm, newValue);
  const getVal = () => valueProp!.get!.call(inputElm);

  ObjectDefineProperty(inputElm, "value", {
    get: getVal,
    set: (newValue: string) => {
      setVal(newValue);
      const blurEv = new Event(blurEvent);
      inputElm.dispatchEvent(blurEv);
    },
  });
}

function querySel(selector: string) {
  return document.querySelector(selector);
}

function getInputElm(opts: ValidatorOptions) {
  if (typeof opts.inputElm === "function") return opts.inputElm(opts);
  if (typeof opts.inputElm === "string") return querySel(opts.inputElm);
  return opts.inputElm as HTMLInputElement;
}

function getErrorElm(opts: any) {
  if (typeof opts.errorElm === "function") return opts.errorElm(opts);
  if (typeof opts.errorElm === "string") return querySel(opts.errorElm);
  return opts.errorElm as HTMLElement;
}

function mergeDefaultOptions(opts: ValidatorOptions) {
  const accept = new RegExp(opts.dataAccept || "[\\d\\w]", "g");
  const testString = `abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 1234567890 !@#$%^&*()_+-=[]\\;',./{}|:"<>?`;
  const matchedChars = testString.match(accept);

  const defaults = {
    inputElm: null,
    errorElm: null,
    required: false,
    minLength: null,
    maxLength: null,
    exactLength: null,
    pattern: null,
    customValidator: null,
    mask: null,
    maskSlots: null,
    dataAccept: null,
    allowUnacceptedChars: false,
    unmaskInputValueProp: false,
    showFullMaskWhileTyping: false,
    hideDotSlots: true,
    validateUnMaskedValue: true,
    validateOnInput: true,
    isNumeric: opts.dataAccept && matchedChars!.length === 10,
    customErrorMessages: {
      isRequired: null,
      inputNotLongEnough: null,
      inputLengthTooLong: null,
      patternNotValid: null,
    },
  };

  return { ...defaults, ...opts } as ValidatorOptionsWithErrorElm;
}

function setupOptionPropertyGettersAndSetters(opts: any) {
  opts.inputElm.mask = opts.mask;
  opts.inputElm.maskSlots = opts.maskSlots;
  opts.inputElm.dataAccept = opts.dataAccept;
  opts.inputElm.unmaskInputValueProp = opts.unmaskInputValueProp;
  opts.inputElm.showFullMaskWhileTyping = opts.showFullMaskWhileTyping;
  opts.inputElm.hideDotSlots = opts.hideDotSlots;
  opts.inputElm.validatorOptions = opts;

  const proxyOption = (prop: any) =>
    ObjectDefineProperty(opts.inputElm.validatorOptions, prop, {
      get: () => opts.inputElm[prop],
      set: (newValue) => (opts.inputElm[prop] = newValue),
    });

  const optionsToProxy = [
    "mask",
    "maskSlots",
    "dataAccept",
    "unmaskInputValueProp",
    "showFullMaskWhileTyping",
    "hideDotSlots",
  ];

  optionsToProxy.forEach((prop) => proxyOption(prop));
}

function validateOptions(opts: any) {
  if (!opts.inputElm) throw `inputElm is a required option`;
  if (opts.inputElm.nodeName !== `INPUT`)
    throw `inputElm must be an INPUT element`;

  const name = opts.inputElm.name;
  const prefix = ` - ${name} - invalid config - `;

  if (!name) {
    console.error("No name attribute given on input", opts.inputElm);
    throw `${prefix} Please give your input a name attribute`;
  }

  if (!(opts.errorElm instanceof HTMLElement))
    throw `${prefix} errorElm must be an HTML Element`;

  if (opts.mask && !opts.maskSlots)
    throw `${prefix} cannot define a mask without defining a maskSlot`;

  if (opts.minLength && opts.exactLength)
    throw `${prefix} cannot define both minLength and exactLength, pick one.`;

  if (opts.maxLength && opts.exactLength)
    throw `${prefix} cannot define both maxLength and exactLength, pick one.`;

  const patternWithoutMinLength =
    opts.pattern &&
    !(opts.minLength || opts.exactLength || !opts.validateOnInput);
  const customWithoutMinLength =
    opts.customValidator &&
    !(opts.minLength || opts.exactLength || !opts.validateOnInput);

  if (patternWithoutMinLength || customWithoutMinLength)
    throw `${prefix} need to define minLength, exactLength, or set validateOnInput: false when using pattern or custom validators.  Otherwise the user will be shown errors immediately as they start typing. This leads to poor UX.  Ideally, we want to give the user a chance to put in the correct input before yelling at them. If your pattern cannot possibly be valid when the input is below a certain length, then we want to wait until that minimum length is met before attempting this validation.`;

  if (opts.mask) {
    const accept = new RegExp(opts.dataAccept || "[\\d\\w]", "g");
    const maskContainsAcceptChars = opts.mask.match(accept) || [];
    if (maskContainsAcceptChars.length > 0)
      throw `${prefix} The 'mask' contains characters that are also able to be typed into the input, please fix the mask or add/correct the 'dataAccept' property to fix this issue`;
  }

  return "success";
}

function onSubmit(ev: any) {
  const form = ev.target;

  checkAll(ev.target);
  const isValid = form.checkValidity();
  if (!isValid) return ev.preventDefault();
  // return isValid;
  // if (isValid) alert("Form is Valid!");
  // ev.preventDefault();
}

function resetInput(inputElm: any) {
  setTimeout(() => {
    inputElm.failedRequiredValidationOnce = false;
    clearValidationError(inputElm);
  }, 0);
}

function onBlur(ev: any) {
  const inputElm = ev.target;
  if (requiredValidationActive(inputElm)) return reportRequired(inputElm);
  if (getValue(inputElm) === "") return clearValidationError(inputElm);
  if (inputContainsUnacceptedChars(inputElm))
    return reportPatternNotValid(inputElm);
  if (inputNotLongEnough(inputElm)) return reportNotLongEnough(inputElm);
  if (inputLengthTooLong(inputElm)) return reportLengthTooLong(inputElm);
  if (patternNotValid(inputElm)) return reportPatternNotValid(inputElm);
  if (customNotValid(inputElm)) return reportCustomNotValid(inputElm);
  clearValidationError(inputElm);
}

function onKeyDown(ev: any) {
  const inputElm = ev.target;
  const opts = inputElms.get(inputElm);
  if (opts.mask) return; // the mask handles what data to accept, no need to do it here;
  if (!opts.dataAccept) return; // only intercept if dataAccept is explicitly set
  if (opts.allowUnacceptedChars) return;
  const allowedKeys = ["Backspace", "Tab", "ArrowRight", "ArrowLeft"];
  if (allowedKeys.includes(ev.key)) return;

  const accept = new RegExp(opts.dataAccept);
  const keyNotAccepted = !accept.test(ev.key);
  if (keyNotAccepted) return ev.preventDefault();
}

function onInput(ev: any) {
  const inputElm = ev.target;
  const opts = inputElms.get(inputElm);
  if (!opts.validateOnInput && inputElm.checkValidity()) return;
  if (requiredValidationActive(inputElm)) return reportRequired(inputElm);
  if (getValue(inputElm) === "") return clearValidationError(inputElm);
  if (inputContainsUnacceptedChars(inputElm))
    return reportPatternNotValid(inputElm);
  if (inputNotLongEnough(inputElm)) return;
  if (inputLengthTooLong(inputElm)) return reportLengthTooLong(inputElm);
  if (patternNotValid(inputElm)) return reportPatternNotValid(inputElm);
  if (customNotValid(inputElm)) return reportCustomNotValid(inputElm);
  clearValidationError(inputElm);
}

function checkAll(formElm: any) {
  const allInputs = Array.from(formElm.querySelectorAll("input"));
  allInputs.forEach((inputElm) => {
    const opts = inputElms.get(inputElm);
    if (!opts) return;
    if (isRequired(inputElm)) return reportRequired(inputElm);
    if (inputContainsUnacceptedChars(inputElm))
      return reportPatternNotValid(inputElm);
    if (inputNotLongEnough(inputElm)) return reportNotLongEnough(inputElm);
    if (inputLengthTooLong(inputElm)) return reportLengthTooLong(inputElm);
    if (patternNotValid(inputElm)) return reportPatternNotValid(inputElm);
    if (customNotValid(inputElm)) return reportCustomNotValid(inputElm);
    if (nativeNotValid(inputElm)) return reportNativeNotValid(inputElm);
    clearValidationError(inputElm);
  });
}

function getValue(inputElm: any) {
  const opts = inputElms.get(inputElm);

  const unmaskedValue =
    typeof inputElm.unmaskedValue === "string"
      ? inputElm.unmaskedValue
      : inputElm.value;

  const maskedValue =
    typeof inputElm.maskedValue === "string"
      ? inputElm.maskedValue
      : inputElm.value;

  return opts.validateUnMaskedValue ? unmaskedValue : maskedValue;
}

function isRequired(inputElm: any) {
  const opts = inputElms.get(inputElm);
  if (!opts.required) return false;
  const inputVal = opts.mask ? inputElm.unmaskedValue : inputElm.value;
  if (inputVal.trim().length === 0) return true;
  return false;
}

function reportRequired(inputElm: any) {
  const opts = inputElms.get(inputElm);
  const customMsg = opts.customErrorMessages.isRequired;
  if (customMsg) return setErrorMessage(inputElm, customMsg);

  inputElm.requiredValidationActive = true;
  inputElm.failedRequiredValidationOnce = true;
  const label =
    (inputElm.labels && inputElm.labels[0]?.innerText) || "This field";
  const msg = `${label} is required.`;
  setErrorMessage(inputElm, msg);
}

function requiredValidationActive(inputElm: any) {
  if (!inputElm.failedRequiredValidationOnce) return false;
  const opts = inputElms.get(inputElm);
  const inputVal = opts.mask ? inputElm.unmaskedValue : inputElm.value;
  if (inputVal.length < 1) return true;

  if (!inputElm.requiredValidationActive) return false;
  inputElm.requiredValidationActive = false;
  clearValidationError(inputElm);
  return false;
}

function inputContainsUnacceptedChars(inputElm: any) {
  const opts = inputElms.get(inputElm);
  if (!opts.dataAccept) return false;
  const valSplit = getValue(inputElm).split("");
  const accept = new RegExp(opts.dataAccept);

  for (const char of valSplit) {
    const keyNotAccepted = !accept.test(char);
    if (keyNotAccepted) return true;
  }

  if (inputElm.patternValidationActive) clearValidationError(inputElm);
  inputElm.patternValidationActive = false;
  return false;
}

function inputNotLongEnough(inputElm: any) {
  const opts = inputElms.get(inputElm);
  if (!opts.minLength && !opts.exactLength) return false;

  const inpVal = getValue(inputElm);

  const tooLongActive = inputElm.inputTooLongErrorActive;
  const maxLen = opts.maxLength || opts.exactLength;
  if (tooLongActive && inpVal.length <= maxLen) {
    inputElm.inputTooLongErrorActive = false;
    clearValidationError(inputElm);
  }

  if (opts.minLength && inpVal.length < opts.minLength) return true;

  if (opts.exactLength && inpVal.length < opts.exactLength) return true;

  return false;
}

function reportNotLongEnough(inputElm: any) {
  const opts = inputElms.get(inputElm);
  const customMsg = opts.customErrorMessages.inputNotLongEnough;
  if (customMsg) return setErrorMessage(inputElm, customMsg);

  const label =
    (inputElm.labels && inputElm.labels[0]?.innerText) || "This field";
  const n = opts.minLength;
  const x = opts.exactLength;
  const m = opts.maxLength;
  const exact = opts.exactLength || m === n;
  const exactOrAtleast = exact ? "exactly" : "atleast";
  const chars = opts.isNumeric ? "digits" : "characters";
  const msg = `${label} must be ${exactOrAtleast} ${n || x} ${chars} long.`;
  setErrorMessage(inputElm, msg);
}

function inputLengthTooLong(inputElm: any) {
  const opts = inputElms.get(inputElm);
  const maxLen = opts.maxLength || opts.exactLength;
  if (!maxLen) return false;

  const inpVal = getValue(inputElm);
  if (inpVal.length > maxLen) {
    inputElm.inputTooLongErrorActive = true;
    return true;
  }

  return false;
}

function reportLengthTooLong(inputElm: any) {
  const opts = inputElms.get(inputElm);
  if (opts.exactLength) return reportNotLongEnough(inputElm);
  const maxLen = opts.maxLength;
  const customMsg = opts.customErrorMessages.inputLengthTooLong;
  if (customMsg) return setErrorMessage(inputElm, customMsg);

  const label =
    (inputElm.labels && inputElm.labels[0]?.innerText) || "This field";
  const chars = opts.isNumeric ? "digits" : "characters";
  const msg = `${label} must not be longer than ${maxLen} ${chars}.`;
  setErrorMessage(inputElm, msg);
}

function patternNotValid(inputElm: any) {
  const opts = inputElms.get(inputElm);
  if (!opts.pattern) return false;
  const val = inputElm.value;
  const re = new RegExp(opts.pattern);
  return !re.test(val);
}

function reportPatternNotValid(inputElm: any) {
  const opts = inputElms.get(inputElm);
  const customMsg = opts.customErrorMessages.patternNotValid;
  if (customMsg) return setErrorMessage(inputElm, customMsg);

  inputElm.patternValidationActive = true;
  const label =
    (inputElm.labels && inputElm.labels[0]?.innerText) || "This field";
  const msg = `${label} is not valid.`;
  setErrorMessage(inputElm, msg);
}

function customNotValid(inputElm: any) {
  const opts = inputElms.get(inputElm);
  if (!opts.customValidator) return false;

  const test = opts.customValidator(getValue(inputElm));
  if (typeof test === "string") {
    opts.customErrorMessages.customNotValid = test;
    return true; //input is not valid is true
  }
  return !test;
}

function reportCustomNotValid(inputElm: any) {
  const opts = inputElms.get(inputElm);
  const customMsg = opts.customErrorMessages.customNotValid;
  if (customMsg) return setErrorMessage(inputElm, customMsg);

  const label =
    (inputElm.labels && inputElm.labels[0]?.innerText) || "This field";
  const msg = `${label} is not valid.`;
  setErrorMessage(inputElm, msg);
}

function nativeNotValid(inputElm: any) {
  return !inputElm.checkValidity();
}

function reportNativeNotValid(inputElm: any) {
  const opts = inputElms.get(inputElm);
  const customMsg = opts.customErrorMessages.nativeNotValid;
  if (customMsg) return setErrorMessage(inputElm, customMsg);
  if (inputElm.validationMessage)
    return setErrorMessage(inputElm, inputElm.validationMessage, true);

  const label =
    (inputElm.labels && inputElm.labels[0]?.innerText) || "This field";
  const msg = `${label} is not valid.`;
  setErrorMessage(inputElm, msg);
}

function openErrorElm(errorElm: any) {
  errorElm.style.height = errorElm.scrollHeight + "px";
}

function closeErrorElm(errorElm: any) {
  errorElm.style.height = "0px";
}

function clearValidationError(inputElm: any, skipSet = false) {
  const currentErrorMsg = inputElm.validationMessage;
  inputElm.classList.remove("invalid");
  inputElm.setCustomValidity("");

  const errorElm = inputElm.errorElm;
  errorElm.errorObj.delete(currentErrorMsg);
  !skipSet && setErrorMessages(errorElm);
}

function setErrorMessage(inputElm: any, msg: any, native = false) {
  if (!native) {
    clearValidationError(inputElm, true);
    if (inputElm.validationMessage === msg) return;
  }

  inputElm.classList.add("invalid");
  inputElm.setCustomValidity(msg);

  const errorElm = inputElm.errorElm;
  errorElm.errorObj.set(msg, true);
  setErrorMessages(errorElm);
}

let showErrorDeBounce: any = null;
function setErrorMessages(errorElm: any) {
  const messages = Array.from(errorElm.errorObj.keys()).join("\n");
  errorElm.innerText = messages;

  clearTimeout(showErrorDeBounce);
  showErrorDeBounce = setTimeout(showErrors, 100);
}

function showErrors() {
  const allErrorElms = Array.from(errorElms.keys());
  for (const errorElm of allErrorElms) {
    if (!errorElm) continue;
    if (errorElm.errorObj.size === 0) closeErrorElm(errorElm);
    if (errorElm.errorObj.size > 0) openErrorElm(errorElm);
  }
}

function createErrorElementForInput(inputElm: any) {
  const errorElm = document.createElement("div");
  errorElm.style.height = "0px";
  errorElm.style.overflow = "hidden";
  errorElm.style.transition = "all 300ms";
  errorElm.style.color = "red";
  errorElm.style.fontSize = "10pt";
  errorElm.style.marginBottom = "10px";
  errorElm.classList.add("error-message");
  inputElm.style.marginBottom = "0px";
  inputElm.after(errorElm);
  return errorElm;
}

function VMaskerSetupProperties(el: any, formatValue: any) {
  const valueProp = ObjectGetOwnPropertyDescriptor(
    HTMLInputElement.prototype,
    "value"
  );
  const setVal = (newValue: any) => valueProp!.set!.call(el, newValue);
  const getVal = () => valueProp!.get!.call(el);

  ObjectDefineProperty(el, "value", {
    get: function () {
      const unmaskedValue =
        typeof el.unmaskedValue === "string" ? el.unmaskedValue : getVal();

      const maskedValue =
        typeof el.maskedValue === "string" ? el.maskedValue : getVal();

      return el.unmaskInputValueProp ? unmaskedValue : maskedValue;
    },
    set: function (newValue) {
      setVal(formatValue(newValue));
      const blurEv = new Event(blurEvent);
      el.dispatchEvent(blurEv);
    },
  });

  const storedValues: any = {
    mask: el.mask,
    maskSlots: el.maskSlots,
    dataAccept: el.dataAccept,
  };

  const maskGettersAndSetters = (prop: any) =>
    ObjectDefineProperty(el, prop, {
      get: () => storedValues[prop],
      set: (newValue) => {
        storedValues[prop] = newValue;
        el.resetVars();
        // eslint-disable-next-line no-self-assign
        el.value = el.value;
      },
    });

  const maskProps = ["mask", "maskSlots", "dataAccept"];

  maskProps.forEach((prop) => maskGettersAndSetters(prop));

  return [getVal, setVal] as const;
}

function VMasker(el: any) {
  let pattern: any = null;
  let slots: any = null;
  let accept: any = null;
  let prev: any = null;
  let first: any = null;

  el.resetVars = () => {
    pattern = el.mask || el.getAttribute("placeholder");
    slots = new Set(el.maskSlots || el.dataset.slots || "_");
    accept = new RegExp(el.dataAccept || el.dataset.accept || "[\\d\\w]", "g");

    prev = ((j) =>
      Array.from(pattern, (c, i) => (slots.has(c) ? (j = i + 1) : j)))(0);

    first = [...pattern].findIndex((c) => slots.has(c));
  };

  el.resetVars();

  const clean = (inputReceived: any) => {
    const unmaskedInput = inputReceived.match(accept) || [];
    const cleanInput = Array.from(pattern, (maskChar) =>
      unmaskedInput[0] === maskChar || slots.has(maskChar)
        ? unmaskedInput.shift() || maskChar
        : maskChar
    );
    el.unmaskedValue = cleanInput?.join("").match(accept)?.join("") || "";
    return cleanInput;
  };

  const formatValue = (value: any) => {
    const fullMaskValue = clean(value);
    const newFirstSlot = fullMaskValue.findIndex((c) => slots.has(c));
    const showFullMask = el.showFullMaskWhileTyping || newFirstSlot === -1;
    const partialMaskValue =
      newFirstSlot === -1
        ? fullMaskValue
        : fullMaskValue.slice(0, newFirstSlot);

    const newVal = showFullMask ? fullMaskValue : partialMaskValue;
    const slotsToHide = el.hideDotSlots && slots.has(".") ? "." : "";
    const maskedValue = newVal.join("").replaceAll(slotsToHide, "").trim();
    el.fullMaskValue = fullMaskValue
      .join("")
      .replaceAll(slotsToHide, "")
      .trim();
    el.partialMaskValue = partialMaskValue
      .join("")
      .replaceAll(slotsToHide, "")
      .trim();
    el.maskedValue = maskedValue;
    return maskedValue;
  };

  const [getVal, setVal] = VMaskerSetupProperties(el, formatValue);

  const format = () => {
    const [i, j] = [el.selectionStart, el.selectionEnd].map((i) => {
      i = clean(getVal().slice(0, i)).findIndex((c) => slots.has(c));
      const test =
        i < 0 ? prev[prev.length - 1] : back ? prev[i - 1] || first : i;
      return test;
    });

    setVal(formatValue(getVal()));
    el.setSelectionRange(i, j);
    back = false;
  };

  const focusFormat = () => {
    setVal(formatValue(getVal()));
    setTimeout(() => {
      const [i, j] = [el.selectionStart, el.selectionEnd].map((i) => {
        i = clean(getVal().slice(0, i)).findIndex((c) => slots.has(c));
        const test =
          i < 0 ? prev[prev.length - 1] : back ? prev[i - 1] || first : i;
        return test;
      });
      el.setSelectionRange(i, j);
      back = false;
    }, 100);
  };

  let back = false;

  addEventListener(
    el,
    keyDownEvent,
    (e: any) => (back = e.key === "Backspace"),
    true
  );
  addEventListener(el, inputEvent, format, true);
  addEventListener(el, focusEvent, focusFormat, true);
  addEventListener(el, clickEvent, focusFormat, true);
  addEventListener(
    el,
    blurEvent,
    () => pattern.startsWith(getVal()) && setVal(""),
    true
  );

  // mask any default values already set in the input
  // eslint-disable-next-line no-self-assign
  el.value = el.value;

  el.alreadyMasked = true;
}

export { setupValidatorInput };

export type { ValidatorOptions };


